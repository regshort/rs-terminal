generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String?        @unique
  emailVerified      DateTime?
  canAccess          Boolean        @default(false)
  isAdmin            Boolean        @default(false)
  isModerator        Boolean        @default(false)
  image              String?
  defaultWorkspace   Workspace[]    @relation("workspaceDefaultedby")
  recentFilters      Recentfilter[]
  usedLinks          Link[]
  accounts           Account[]
  sessions           Session[]
  workspaces         Workspace[]    @relation("workspaceCreator")
  watchlists         Watchlist[]    @relation("watchlistCreator")
  createdLinks       Link[]         @relation("linkCreator")

  likedWorkspaces Workspace[] @relation("workspaceLikedby")
  likedWatchlists Watchlist[] @relation("watchlistLikedby")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Security {
  ticker       String         @unique @default("N/A")
  name         String         @default("N/A")
  desc         String         @default("N/A")
  isShare      Boolean        @default(false)
  hasFloat     Boolean        @default(false)
  hasMarketCap Boolean        @default(false)
  hasYf        Boolean        @default(false)
  hasImg       Boolean        @default(false)
  lastImgCheck DateTime?
  watchlist    Watchlist[]
  recentFilter Recentfilter[]

  @@id([ticker])
  @@map("securities")
}

model Workspace {
  id            String  @id @default(cuid())
  name          String
  description   String?
  workspace     Json
  watchlist     Boolean @default(false)
  default       Boolean @default(false)
  globalDefault Boolean @default(false)
  relativeDate  String?
  private       Boolean @default(false)
  defaultFor    User[]  @relation("workspaceDefaultedby")
  likedBy       User[]  @relation("workspaceLikedby")
  creator       String
  user          User    @relation("workspaceCreator", fields: [creator], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, creator])
  @@map("workspaces")
}

model Watchlist {
  id            String     @id @default(cuid())
  name          String
  globalDefault Boolean    @default(false)
  private       Boolean    @default(false)
  likedBy       User[]     @relation("watchlistLikedby")
  creator       String
  user          User       @relation("watchlistCreator", fields: [creator], references: [id], onDelete: Cascade)
  companies     Security[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([name, creator])
  @@map("watchlists")
}

model Link {
  key       String   @id @default(uuid())
  name      String?
  type      String   @default("invite")
  uses      Int
  expiresAt DateTime
  usedBy    User[]
  creator   String
  user      User     @relation("linkCreator", fields: [creator], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([name, creator])
}

model Recentfilter {
  id         String     @id @default(cuid())
  securities Security[]
  creator    String     @unique
  user       User       @relation(fields: [creator], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
